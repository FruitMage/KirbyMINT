using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MINT;

namespace MINT.KSA
{
    public class Opcodes
    {
        public Dictionary<byte, string> opcodeNames = new Dictionary<byte, string>()
        {
            {0x01, "setFalse" },
            {0x02, "setTrue" },
            {0x03, "load" },
            {0x04, "loadString" },
            {0x05, "moveRegister" },
            {0x06, "loadPair" },
            {0x07, "NOP" },
            {0x08, "loadField" },
            {0x09, "loadPointer32" },
            {0x0A, "loadArrayIndex32" },
            {0x0B, "loadPointer64" },
            {0x0C, "loadArrayIndex64" },
            {0x0D, "loadArrayIndex64[2]" },
            {0x0E, "loadXref" },
            {0x0F, "loadXref" },
            {0x10, "deref" },
            {0x11, "setPointer32" },
            {0x12, "setArrayIndex32" },
            {0x13, "setPointer64" },
            {0x14, "setArrayIndex64" },
            {0x15, "setField" },
            {0x16, "addi" },
            {0x17, "subi" },
            {0x18, "multis" },
            {0x19, "divis" },
            {0x1A, "modis" },
            {0x1B, "multi" },
            {0x1C, "divi" },
            {0x1D, "modi" },
            {0x1E, "inci" },
            {0x1F, "deci" },
            {0x20, "negi" },
            {0x21, "addf" },
            {0x22, "subf" },
            {0x23, "multf" },
            {0x24, "divf" },
            {0x25, "incf" },
            {0x26, "decf" },
            {0x27, "negf" },
            {0x28, "lessThan" },
            {0x29, "lessOrEqual" },
            {0x2A, "greaterOrEqual" },
            {0x2B, "greaterThan" },
            {0x2C, "equal" },
            {0x2D, "notEqual" },
            {0x2E, "floatLess" },
            {0x2F, "floatLessOrEqual" },
            {0x30, "floatEqual" },
            {0x31, "floatNotEqual" },
            {0x32, "lessThanZero" },
            {0x33, "lessOrEqualZero" },
            {0x34, "boolEqual" },
            {0x35, "boolNotEqual" },
            {0x36, "equal64" },
            {0x37, "notEqual64" },
            {0x38, "stringEqual" },
            {0x39, "stringNotEqual" },
            {0x3A, "stringEqualU16" },
            {0x3B, "stringNotEqualU16" },
            {0x3C, "returnIfGreater" },
            {0x3D, "bitAnd" },
            {0x3E, "bitOr" },
            {0x3F, "bitXor" },
            {0x40, "bitNot" },
            {0x41, "flipLowest" },
            {0x42, "shiftLeft" },
            {0x43, "shiftRight" },
            {0x44, "jump" },
            {0x45, "jumpIfTrue" },
            {0x46, "jumpIfFalse" },
            {0x47, "declare" },
            {0x48, "return" },
            {0x49, "call" },
            {0x4A, "callExternal" },
            {0x4B, "callExternal2" },
            {0x4C, "callExternal3" },

            {0x4F, "yield" },

            {0x50, "unk_50" },
            {0x51, "unk_51" },

            {0x53, "unk_53" },
            {0x54, "unk_54" },
            {0x55, "unk_55" },

            {0x57, "unk_57" },
            {0x58, "unk_58" },
            {0x59, "unk_59" },
            {0x5A, "unk_5A" },

            {0x5C, "unk_5C" },
            {0x5D, "unk_5D" },
            {0x5E, "unk_5E" },

            {0x5F, "unk_5F" },

            {0x61, "unk_61" },

            {0x63, "unk_63" },

            {0x67, "unk_67" },

            {0x6A, "unk_6A" },
        };
        public Dictionary<byte, Format> opcodeFormats = new Dictionary<byte, Format>()
        {
            {0x01, Format.Z },
            {0x02, Format.Z },
            {0x03, Format.sZV },
            {0x04, Format.strZV },
            {0x05, Format.ZX },
            {0x06, Format.LDP },
            {0x07, Format.None },
            {0x08, Format.xZV },
            {0x09, Format.ZX },
            {0x0A, Format.ZXxY },
            {0x0B, Format.ZX },
            {0x0C, Format.ZXxY },
            {0x0D, Format.xZV },
            {0x0E, Format.xZX },
            {0x0F, Format.xZX },
            {0x10, Format.ZX },
            {0x11, Format.ZX },
            {0x12, Format.ZXxY },
            {0x13, Format.ZX },
            {0x14, Format.ZXxY },
            {0x15, Format.xZV },
            {0x16, Format.LDP },
            {0x17, Format.LDP },
            {0x18, Format.LDP },
            {0x19, Format.LDP },
            {0x1A, Format.LDP },
            {0x1B, Format.LDP },
            {0x1C, Format.LDP },
            {0x1D, Format.LDP },
            {0x1E, Format.Z },
            {0x1F, Format.Z },
            {0x20, Format.Z },
            {0x21, Format.LDP },
            {0x22, Format.LDP },
            {0x23, Format.LDP },
            {0x24, Format.LDP },
            {0x25, Format.Z },
            {0x26, Format.Z },
            {0x27, Format.Z },
            {0x28, Format.LDP },
            {0x29, Format.LDP },
            {0x2A, Format.LDP },
            {0x2B, Format.LDP },
            {0x2C, Format.LDP },
            {0x2D, Format.LDP },
            {0x2E, Format.LDP },
            {0x2F, Format.LDP },
            {0x30, Format.LDP },
            {0x31, Format.LDP },
            {0x32, Format.ZX },
            {0x33, Format.ZX },
            {0x34, Format.LDP },
            {0x35, Format.LDP },
            {0x36, Format.ZXY },
            {0x37, Format.ZXY },
            {0x38, Format.LDPstr },
            {0x39, Format.LDPstr },
            {0x3A, Format.LDPstr },
            {0x3B, Format.LDPstr },
            {0x3C, Format.ZX },
            {0x3D, Format.LDP },
            {0x3E, Format.LDP },
            {0x3F, Format.LDP },
            {0x40, Format.ZX },
            {0x41, Format.ZX },
            {0x42, Format.LDP },
            {0x43, Format.LDP },
            {0x44, Format.shV },
            {0x45, Format.shZV },
            {0x46, Format.shZV },
            {0x47, Format.nZXY },
            {0x48, Format.Y },
            {0x49, Format.xZV },
            {0x4A, Format.xZV },
            {0x4B, Format.xZV },
            {0x4C, Format.xZV },

            {0x4F, Format.Z },

            {0x50, Format.ZXY },
            {0x51, Format.ZXxY },

            {0x53, Format.xZV },
            {0x54, Format.xZV },
            {0x55, Format.xZV },

            {0x57, Format.ZXxY },
            {0x58, Format.Z },
            {0x59, Format.ZX },
            {0x5A, Format.ZX },

            {0x5C, Format.xZV },
            {0x5D, Format.ZXY },
            {0x5E, Format.xZV },

            {0x5F, Format.ZX },

            {0x61, Format.ZX },

            {0x63, Format.ZX },

            {0x67, Format.xZV },

            {0x6A, Format.ZX },
        };
    }
}
